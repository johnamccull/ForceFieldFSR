# ARGUMENTS --------------------------------------------------------------------
##
# Board architecture
##
ARG IMAGE_ARCH=

##
# Base container version
##
ARG BASE_VERSION=3.3.0-bookworm

##
# Debug port
##
ARG SSH_DEBUG_PORT=

##
# Run as
##
ARG SSHUSERNAME=

##
# Application root directory inside the container
##
ARG APP_ROOT=

# BUILD ------------------------------------------------------------------------
##
# Deploy Step
#
# This is using commontorizon/debian only by the ease of the use of the
# same image tags for x86_64 architectures:
#    - AMD64 -> torizon/debian-upstream:3 == commontorizon/debian:3.3.0-bookworm
#    - ARM64 -> torizon/debian:3          == commontorizon/debian:3.3.0-bookworm
#    - ARM   -> torizon/debian:3          == commontorizon/debian:3.3.0-bookworm
##
FROM --platform=linux/${IMAGE_ARCH} \
    commontorizon/debian:${BASE_VERSION} AS Debug

ARG IMAGE_ARCH
ARG SSH_DEBUG_PORT
ARG SSHUSERNAME
ARG APP_ROOT
ENV APP_EXECUTABLE ${APP_EXECUTABLE}

# SSH for remote debug
EXPOSE ${SSH_DEBUG_PORT}

# Make sure we don't get notifications we can't answer during building.
ENV DEBIAN_FRONTEND="noninteractive"

# your regular RUN statements here
# Install required packages
RUN apt-get -q -y update && \
    apt-get -q -y install \
    openssl \
    openssh-server \
    rsync \
    file \
    curl \
    gdb && \
    apt-get clean && apt-get autoremove && \
    rm -rf /var/lib/apt/lists/*

# automate for torizonPackages.json
RUN apt-get -q -y update && \
    apt-get -q -y install \
# DO NOT REMOVE THIS LABEL: this is used for VS Code automation
    # __torizon_packages_dev_start__
	libgpiod-dev:arm64 \
	i2c-tools:arm64 \
	can-utils:arm64 \
	libgpiod2:arm64 \
	iproute2:arm64 \
	automake:arm64 \
	libtool:arm64 \
	valgrind:arm64 \
	autoconf:arm64 \
	wget:arm64 \
	unzip:arm64 \
	gpiod:arm64 \
	vim:arm64 \
	sudo:arm64 \
	libc6-dev:arm64 \
	libyaml-cpp-dev:arm64 \
	libssl-dev:arm64 \
	libssl-dev:arm64 \
	net-tools:arm64 \
    # __torizon_packages_dev_end__
# DO NOT REMOVE THIS LABEL: this is used for VS Code automation
    && \
    apt-get clean && apt-get autoremove && \
    rm -rf /var/lib/apt/lists/*

RUN sudo apt-get update;
RUN sudo apt-get install emacs-nox;
RUN sudo apt-get install git;
RUN sudo apt-get install software-properties-common;
RUN sudo apt-get install apt-utils;

ENV LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/usr/local/lib"

RUN usermod -a -G spidev,gpio torizon

# ⚠️ DEBUG PURPOSES ONLY!!
# copies RSA key to enable SSH login for user
COPY .conf/id_rsa.pub /id_rsa.pub

# create folders needed for the different components
# configures SSH access to the container and sets environment by default
RUN mkdir /var/run/sshd && \
    sed 's@session\s*required\s*pam_loginuid.so@session optional pam_loginuid.so@g' \
        -i /etc/pam.d/sshd && \
    if test $SSHUSERNAME != root ; \
        then mkdir -p /home/$SSHUSERNAME/.ssh ; \
        else mkdir -p /root/.ssh ; fi && \
    if test $SSHUSERNAME != root ; \
        then cp /id_rsa.pub /home/$SSHUSERNAME/.ssh/authorized_keys ; \
        else cp /id_rsa.pub /root/.ssh/authorized_keys ; fi && \
    echo "PermitUserEnvironment yes" >> /etc/ssh/sshd_config && \
    echo "Port ${SSH_DEBUG_PORT}" >> /etc/ssh/sshd_config && \
    su -c "env" $SSHUSERNAME > /etc/environment

RUN rm -r /etc/ssh/ssh*key && \
    dpkg-reconfigure openssh-server

# Copy the compiled application to the $APP_ROOT directory path inside the
# container, where $APP_ROOT is the torizon_app_root configuration defined
# in settings.json.
COPY --chown=$SSHUSERNAME:$SSHUSERNAME ./build-${IMAGE_ARCH}/bin ${APP_ROOT}

CMD [ "/usr/sbin/sshd", "-D" ]

WORKDIR /home/torizon/app/
